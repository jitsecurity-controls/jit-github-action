name: 'Jit security-controls action'
description: 'Runs a Jit security-control on a target dir'
inputs:
  container_args:
    description: 'container additional args'
    required: false
    default: ""
  security_control:
    description: "Docker image tag path of security control to execute"
    required: true
  security_control_output_file:
    description: "path to the security control output"
    required: false
    default: ""
  fail_on_findings:
    description: "fail control when finding is found"
    required: false
    default: "true"
  fail_if_cannot_checkout:
    description: "fail control if cannot checkout original repo"
    required: false
    default: "true"
  inline_environment:
    description: "inline environment variables to be passed to the container"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Temp Raise Error
      if: always()
      run: exit 1
      shell: bash
  
    # We are checking out the action repo files, in order to use pre defined scripts
    - name: Check out jit-github-actions
      uses: actions/checkout@v3
      with:
        repository: jitsecurity-controls/jit-github-action
        ref: main
        path: ./.github/actions/jit-github-action

    - name: Install OIDC Client from Core Package
      shell: bash
      run: npm install @actions/core@1.6.0 @actions/http-client

    - name: Get OIDC Token
      uses: actions/github-script@v6
      id: get-oidc-token-from-github
      with:
        script: |
          const actionCore = require('@actions/core');
          const { execSync } = require('child_process');
            (async () => {
              try {
                const OIDC_TOKEN = await actionCore.getIDToken();
                actionCore.setOutput('OIDC_TOKEN', OIDC_TOKEN);
              } catch (error) {
                actionCore.error('Failed to get OIDC Token from GitHub servers: ' + error + '\n');
                execSync('exit 100');
              }
            })();

    - id: oidc-auth
      shell: bash
      env:
        OIDC_TOKEN: ${{ steps.get-oidc-token-from-github.outputs.OIDC_TOKEN }}
      run: |
        source ./.github/actions/jit-github-action/retry-curl.sh      
        AUTH_RESPONSE=$(retry_curl \
            -X POST \
            -H "Authorization: Bearer $OIDC_TOKEN" \
            -d '{
                  "target_repo": "${{ fromJSON(github.event.inputs.client_payload).payload.full_repo_path }}",
                  "jit_event_id": "${{ fromJSON(github.event.inputs.client_payload).payload.jit_event_id }}",
                  "execution_id": "${{ fromJSON(github.event.inputs.client_payload).payload.execution_id }}"
            }' \
            ${{ fromJSON(github.event.inputs.client_payload).payload.jit_base_api }}/github/auth
        )
        
        AUTH_RESPONSE_CODE=${AUTH_RESPONSE: -3}
        echo "Calling OIDC Auth endpoint returned with response_code=$AUTH_RESPONSE_CODE"
        
        if [ $AUTH_RESPONSE_CODE = 200 ]; then
          AUTH_RESPONSE_BODY=${AUTH_RESPONSE:0:${#AUTH_RESPONSE}-3}
          echo "github_token=$(echo $AUTH_RESPONSE_BODY | jq -r '.github_token')" >> $GITHUB_OUTPUT
          echo "jit_token=$(echo $AUTH_RESPONSE_BODY | jq -r '.jit_token')" >> $GITHUB_OUTPUT
        elif [ $AUTH_RESPONSE_CODE = 422 ]; then
          echo "Repo is no longer accessible for the installation"
          exit 104
        else
          echo "Got fatal error when calling auth oidc token with jit server"
          exit 101
        fi

    - name: Link job ID to Execution
      shell: bash
      continue-on-error: true
      run: |
        echo "(info) Linking job ID to Jit"
        curl \
          -s -o /dev/null -w "%{http_code}" \
          -X POST \
          -H "Authorization: Bearer ${{ steps.oidc-auth.outputs.jit_token }}" \
          -H "Content-Type: application/json" \
          -d '{
                "vendor_job_id": "${{ fromJSON(github.run_id) }}",
                "jit_event_id": "${{ fromJSON(github.event.inputs.client_payload).payload.jit_event_id }}",
                "execution_id": "${{ fromJSON(github.event.inputs.client_payload).payload.execution_id }}"
          }' \
          ${{ fromJSON(github.event.inputs.client_payload).payload.jit_base_api }}/execution/start

    - name: Set centralized_repo_files_location env var
      shell: bash
      env:
        CENTRALIZED_REPO_FILES_LOCATION: ${{ fromJSON(github.event.inputs.client_payload).payload.centralized_repo_files_location || '' }}
      run: |
        echo "CONFIG_FILE_PATH=/.jit/${CENTRALIZED_REPO_FILES_LOCATION}jit.yml" >> $GITHUB_ENV
        echo "CENTRALIZED_REPO_FILES_LOCATION_PATH=${PWD}/.jit/${CENTRALIZED_REPO_FILES_LOCATION}" >> $GITHUB_ENV

    - name: Checkout centralized repository
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        token: ${{ steps.oidc-auth.outputs.github_token }}
        ref: ''
        path: ".jit/"

    - name: Sparse checkout repository
      continue-on-error: true
      id: sparse-checkout-repository
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.oidc-auth.outputs.github_token }}
      if: >-
        ( !(fromJSON(github.event.inputs.client_payload).payload.runner_setup) || fromJSON(github.event.inputs.client_payload).payload.runner_setup.checkout == true )
        && (fromJSON(github.event.inputs.client_payload).payload.commits.base_sha && fromJSON(github.event.inputs.client_payload).payload.commits.head_sha
        && fromJSON(github.event.inputs.client_payload).payload.branch)
      run: |
        BASE_SHA=${{ fromJSON(github.event.inputs.client_payload).payload.commits.base_sha }}
        HEAD_SHA=${{ fromJSON(github.event.inputs.client_payload).payload.commits.head_sha }}
        BRANCH_NAME=${{ fromJSON(github.event.inputs.client_payload).payload.branch }}
        FULL_REPO_PATH=${{ fromJSON(github.event.inputs.client_payload).payload.full_repo_path }}

        echo "(info) Cloning the repository without files..."
        # clone branch (-b) with only git history (--no-checkout), excluding file contents (--filter=blob:none).
        git clone --no-checkout --filter=blob:none -b ${BRANCH_NAME} https://x-access-token:${GITHUB_TOKEN}@github.com/${FULL_REPO_PATH}.git code/
        cd code/

        echo "(info) Fetching the base commit and list of modified files..."
        git fetch origin $BASE_SHA $HEAD_SHA
        git diff --name-only $BASE_SHA...$HEAD_SHA > /tmp/modified_files.txt

        echo "(info) Initializing sparse checkout and checking out modified files..."
        # use the --no-cone flag because we're providing a list of files which is not supported by cone mode
        git sparse-checkout init --no-cone
        cat /tmp/modified_files.txt > .git/info/sparse-checkout
        git checkout $BRANCH_NAME

        echo "(info) Checked out the following files:"
        cat /tmp/modified_files.txt
        echo "(info) Done checking out modified files"

    # scans default branches and serves as a fallback for the sparse-checkout-repository step in case it fails
    - name: Checkout repository
      # we don't want enrichment to fail the action on empty repo, it has its own logic to handle it
      continue-on-error: true
      id: checkout-repository
      # this if should pass if there is not runner setup (old flow would checkout always) or when new flow ask to checkout
      if: >-
        ( !(fromJSON(github.event.inputs.client_payload).payload.runner_setup) || fromJSON(github.event.inputs.client_payload).payload.runner_setup.checkout == true )
        && steps.sparse-checkout-repository.outcome != 'success'
      uses: actions/checkout@v3
      with:
        repository: ${{ fromJSON(github.event.inputs.client_payload).payload.full_repo_path }}
        ref: ${{ fromJSON(github.event.inputs.client_payload).payload.commits.head_sha }}
        fetch-depth: 0
        token: ${{ steps.oidc-auth.outputs.github_token }}
        path: "code/"

    - name: Exit if checkout failure is fatal
      shell: bash
      if: (steps.checkout-repository.outcome == 'failure') && fromJSON(github.event.inputs.client_payload).payload.workflow_job_name != 'enrich' && inputs.fail_if_cannot_checkout == 'true'
      run: |
        echo "(error) Repository checkout failed, can't continue job execution"
        exit 102

    # the cache_file is the image name with / replaced with __, we use it to query the cache storage together with the digest
    - name: Set cache_file value
      id: set-cache-file
      continue-on-error: true
      shell: bash
      run: |
        CACHE_FILE=$(sed 's/\//__/g' <<< "${{ inputs.security_control }}")  # replace / with __ to avoid / interpreted as directory separator
        echo "(info) CACHE_FILE: $CACHE_FILE" 
        echo "cache_file=$CACHE_FILE" >> $GITHUB_OUTPUT

    - name: Login to docker registry
      shell: bash
      run: |
        source ./.github/actions/jit-github-action/retry-curl.sh
        LOGIN_RESPONSE=$(retry_curl \
            -X POST \
            -H "Authorization: Bearer ${{ steps.oidc-auth.outputs.jit_token }}" \
            ${{ fromJSON(github.event.inputs.client_payload).payload.jit_base_api }}/authentication/registry/login
        )
        
        LOGIN_RESPONSE_CODE=${LOGIN_RESPONSE: -3}
        echo "Calling Login to Jit docker registery endpoint returned with response_code=$LOGIN_RESPONSE_CODE"
        
        if [ $LOGIN_RESPONSE_CODE = 200 ]; then
          LOGIN_RESPONSE_BODY=${LOGIN_RESPONSE:0:${#LOGIN_RESPONSE}-3}
          echo $LOGIN_RESPONSE_BODY | docker login --username AWS --password-stdin registry.jit.io
        else
          echo "Got fatal error when login to Jit docker registry"
          exit 103
        fi

    - uses: actions/cache/restore@v3
      if: steps.set-cache-file.outputs.cache_file != ''
      id: cache-docker-image
      continue-on-error: true
      with:
        path: ci/cache/docker/
        # Instead of attempting to get a cache hit, we just attempt to load the last version of the image from the cache.
        # If the image reference has updated, docker pull will verify that and pull the new version, then we will
        # save the new version to the cache
        key: 'null'
        restore-keys: ${{ steps.set-cache-file.outputs.cache_file }}@

    - name: Load image from cache
      if: steps.cache-docker-image.outputs.cache-matched-key != ''
      shell: bash
      continue-on-error: true
      run: docker load -i ci/cache/docker/${{ steps.cache-docker-image.outputs.cache-matched-key }}

    - name: Pull image
      shell: bash
      run: docker pull ${{ inputs.security_control }}

    - name: Set image id
      continue-on-error: true
      id: set-image-id
      shell: bash
      run: |
        IMAGE_ID=$(docker image inspect ${{ inputs.security_control }} | jq -r '.[0].Id')
        echo "(info) IMAGE_ID: $IMAGE_ID"
        echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT

    - name: Save image in cache directory
      continue-on-error: true
      # next if condition verifies we update the cache only if the image has changed (based on its id)
      if: (!contains(steps.cache-docker-image.outputs.cache-matched-key, steps.set-image-id.outputs.image_id))
      id: save-image
      shell: bash
      run: |
        mkdir -p ci/cache/docker
        if [ -f ci/cache/docker/${{ steps.cache-docker-image.outputs.cache-matched-key }} ]
        then
          echo "(info) Removing old image from cache"
          rm ci/cache/docker/${{ steps.cache-docker-image.outputs.cache-matched-key }}
        fi
        docker save ${{ inputs.security_control }} -o ci/cache/docker/${{ steps.set-cache-file.outputs.cache_file }}@${{ steps.set-image-id.outputs.image_id }}.tar

    - uses: actions/cache/save@v3
      continue-on-error: true
      if: steps.save-image.conclusion == 'success'
      with:
        path: ci/cache/docker/
        key: ${{ steps.set-cache-file.outputs.cache_file }}@${{ steps.set-image-id.outputs.image_id }}.tar

    - name: Run The Action
      id: run-the-action
      run: |
        echo CONFIG_FILE_PATH=${CONFIG_FILE_PATH} > /tmp/docker_env.txt
        echo SOURCE_CODE_FOLDER=/code >> /tmp/docker_env.txt
        echo FAIL_ON_FINDINGS=${{ inputs.fail_on_findings }} >> /tmp/docker_env.txt
        if [ -n "${{ inputs.security_control_output_file }}" ]
        then
          echo SECURITY_CONTROL_OUTPUT_FILE=${{ inputs.security_control_output_file }} >> /tmp/docker_env.txt
        fi
        echo "action_successful=true" >> $GITHUB_ENV
        docker run \
          --rm \
          ${{ inputs.inline_environment }} \
          --env-file /tmp/docker_env.txt \
          ${{ inputs.container_args }} \
          -v ${CENTRALIZED_REPO_FILES_LOCATION_PATH}:/.jit \
          ${{ env.mount_original_repo_command }} \
          ${{ inputs.security_control }} \
          --execution-id ${{ fromJSON(github.event.inputs.client_payload).payload.execution_id }} \
          --event-id ${{ fromJSON(github.event.inputs.client_payload).payload.jit_event_id }} \
          --base-url ${{ fromJSON(github.event.inputs.client_payload).payload.jit_base_api }} \
          --jit-token ${{ steps.oidc-auth.outputs.jit_token }}
      shell: bash
      env:
        # this field would set the original repo command mount command (would be mounted always in the old flow) and only if checkout = true in the new flow
        mount_original_repo_command: ${{ fromJSON('["","-v $(pwd)/code:/code"]')[((!(fromJSON(github.event.inputs.client_payload).payload.runner_setup) || (fromJSON(github.event.inputs.client_payload).payload.runner_setup.checkout == true)))] }}

    - name: Notify Jit on Failure
      if: failure() && steps.run-the-action.outputs.action_successful != 'true'
      uses: actions/github-script@v6
      with:
        script: |
          console.log(`Notifying Jit of failure`);
          const jit_jwt_token = ${{ fromJSON(github.event.inputs.client_payload).jit_jwt_token }};
          const headers = {
            'Authorization': `Bearer ${jit_jwt_token}`,
            'Content-Type': 'application/json',
          };
          console.log(`Headers: ${JSON.stringify(headers)}`);
          const body = {
            execution_id: "${{ fromJSON(github.event.inputs.client_payload).payload.execution_id }}",
            jit_event_id: "${{ fromJSON(github.event.inputs.client_payload).payload.jit_event_id }}",
          };
          console.log(`Notifying Jit of failure with body: ${JSON.stringify(body)}`);
          
          (async () => {
            const url = `${{ fromJSON(github.event.inputs.client_payload).payload.jit_base_api }}/github/workflow-failed }}`
            console.log(`URL=${url}`);
            const response = await github.request(`POST ${url}`, {
              headers: headers,
              body: JSON.stringify(body),
            });
            if (response.status !== 202) {
              throw new Error(`Failed to notify Jit of failure. HTTP status code: ${response.status}`);
            }
          })();
